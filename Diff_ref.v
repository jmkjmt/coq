(** File generated by coq-of-ocaml *)
Require Import CoqOfOCaml.CoqOfOCaml.
Require Import CoqOfOCaml.Settings.

Reserved Notation "'var".

Inductive lambda : Set :=
| V : 'var -> lambda
| P : 'var -> lambda -> lambda
| C : lambda -> lambda -> lambda

where "'var" := (string).

Definition var := 'var.

Fixpoint is_mem (variables : list var) (var : var) : bool :=
  match variables with
  | [] => false
  | cons hd tl =>
    if equiv_decb hd var then
      true
    else
      is_mem tl var
  end.

Fixpoint sub_check (lambda : lambda) (vars : list var) : bool :=
  match lambda with
  | V x_value => is_mem vars x_value
  | P x_value e_value => sub_check e_value (cons x_value vars)
  | C e1 e2 => andb (sub_check e1 vars) (sub_check e2 vars)
  end.

Fixpoint check_ref (lambda : lambda) : bool := sub_check lambda nil.


