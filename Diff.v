(** File generated by coq-of-ocaml *)
Require Import CoqOfOCaml.CoqOfOCaml.
Require Import CoqOfOCaml.Settings.

Reserved Notation "'var".

Inductive lambda : Set :=
| V : 'var -> lambda
| P : 'var -> lambda -> lambda
| C : lambda -> lambda -> lambda

where "'var" := (string).

Definition var := 'var.

Fixpoint checkStation {A : Set} (function_parameter : A * list A) : list A :=
  let '(m_value, lst) := function_parameter in
  match lst with
  | [] => nil
  | cons hd tl =>
    if equiv_decb hd m_value then
      checkStation (m_value, tl)
    else
      cons hd (checkStation (m_value, tl))
  end.

Fixpoint check (lambda : lambda) : bool :=
  let fix isInArea (met : lambda) (lst : list var) : list var :=
    match met with
    | V var => cons var lst
    | P var mtro => checkStation (var, (isInArea mtro lst))
    | C met1 met2 =>
      CoqOfOCaml.Stdlib.app (isInArea met1 lst) (isInArea met2 lst)
    end in
  if equiv_decb (isInArea lambda nil) nil then
    true
  else
    false.

Fixpoint is_mem (variables : list var) (var : var) : bool :=
  match variables with
  | [] => false
  | cons hd tl =>
    if equiv_decb hd var then
      true
    else
      is_mem tl var
  end.

Fixpoint sub_check (lambda : lambda) (vars : list var) : bool :=
  match lambda with
  | V x_value => is_mem vars x_value
  | P x_value e_value => sub_check e_value (cons x_value vars)
  | C e1 e2 => andb (sub_check e1 vars) (sub_check e2 vars)
  end.

Fixpoint check_ref (lambda : lambda) : bool := sub_check lambda nil.